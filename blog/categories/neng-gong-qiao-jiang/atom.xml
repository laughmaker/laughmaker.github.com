<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 能工巧匠 | 闻竹]]></title>
  <link href="http://makeLaugh.github.io/blog/categories/neng-gong-qiao-jiang/atom.xml" rel="self"/>
  <link href="http://makeLaugh.github.io/"/>
  <updated>2014-05-15T17:24:58+08:00</updated>
  <id>http://makeLaugh.github.io/</id>
  <author>
    <name><![CDATA[makeLaugh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[善用Xcode，提高开发效率]]></title>
    <link href="http://makeLaugh.github.io/blog/2014/05/11/shan-yong-xcode%2Cti-gao-kai-fa-xiao-lu/"/>
    <updated>2014-05-11T21:53:08+08:00</updated>
    <id>http://makeLaugh.github.io/blog/2014/05/11/shan-yong-xcode,ti-gao-kai-fa-xiao-lu</id>
    <content type="html"><![CDATA[<p>　　默认的xcode其实已经很强大的了，用起来已经很贴心舒服了，但它还可以更加强大的，以下介绍下我自己的一些增强技巧。</p>

<p>　　<strong>一、配色</strong><br />
　　要提高效率，首先得看着舒服，是吧。默认的白色，平常使用其实也挺不错的了，但时间用长了，还是感觉有一些不舒服，它最大的问题是色彩对比不明显，不容易定位到关键词上去。我差不多是使用默认配色一年多后，才打算改换主题的，后来在网上下了很多别人的主题，都发觉要么是对比度太强烈了，看着刺眼，或者太花哨，或者太死板，都有一些不喜欢的地方。后来找到了一个相对比较喜欢的主题，这个主题是仿sublime的一个主题<a href="https://github.com/colinta/zenburn">zenburn</a> ，但还是有一些不太喜欢的地方，后来花了一整个下午，根据它调了一个主题，包括字体、背景色、关键词颜色等等，算是比较满意了，<a href="https://github.com/makeLaugh/xcodeTheme">下载链接</a>在这里，喜欢的拿走。<br />
　　安装方式：下载后，将主题文件放入<code>/Users/HZD/Library/Developer/Xcode/UserData/FontAndColorThemes </code>目录中，重启<code>xcode即可</code>。我的环境是xcode5.1，其它的未测试。</p>

<p>    <strong>二、CocoaPods</strong><br />
    对CocoaPods的介绍和安装教程网太多了，随便百度谷歌一下都满大街了，我想说，如果还没有使用它来管理毓三方库的，那得切换了，因为它实在是太简单太高效了。下面简单罗列一下使用步骤。 <a href="http://code4app.com/article/cocoapods-install-usage">详细参考教程</a></p>

<ul>
  <li>
    <p>更换ruby源，以加快安装速度，如果已经更换过的跳过：</p>

    <pre><code>  1. gem sources --remove https://rubygems.org/
  2. gem sources -a http://ruby.taobao.org/
  3. gem sources -l //查看新的镜像源
</code></pre>
  </li>
  <li>
    <p>安装ruby，一般mac都自带了ruby，若未安装，可用以下方式安装或更新到最新版  </p>

    <pre><code>  1. 安装RVM：curl -L https://get.rvm.io | bash -s stable --ruby
  2. 列出已知的ruby版本：rvm list known
  3. 安装最新的版本：rvm install version号
  4. 切换到安装的版本上：rvm use version号
  5. rvm rubygems latest
</code></pre>
  </li>
  <li>
    <p>安装和使用CocoaPods</p>

    <pre><code>  1. 安装CocoaPods：sudo gem install cocoapods
  2. 搜索要使用的库：pod search AFNetworking，会得到如何使用、源地址等提示
  3. 编辑配置文件：vim Podfile
  4. 按上术提示，添加相关配置，并保存  
     platform :ios, '7.0'  
     pod "AFNetworking", "~&gt; 2.0"
  5. 安装第三方库：pod install 
  6. 以后打开项目都打开`.xcworkspace`文件，而不是源来的项目文件。
</code></pre>
  </li>
</ul>

<p>    就这样，安装完成了，以后就可以使用AFNetworking了。
    一个技巧：有时候，第三方库会有警告，为了忽略警告，只需要在Podfile文件中添加一个命令即可，<code>inhibit_all_warnings!</code>。
    以下我的Podfile配置文件作为一个参考：  </p>

<pre><code>platform :ios, '7.0'
inhibit_all_warnings!
pod 'MKNetworkKit'
pod 'FMDB', '~&gt; 2.2'
pod 'REFrostedViewController', '~&gt; 2.4.5'
pod 'BlocksKit'
pod 'Overline-BlocksKit'
pod 'Masonry'
pod 'AFNetworking', '~&gt; 2.2.3'
pod 'UIColor+CSSColors', '~&gt; 0.0.1'
pod 'BlurryModalSegue', '~&gt; 1.0.0'
pod 'SBAPNSPusher', '~&gt; 2.2.1'!
</code></pre>

<p>    伏笔，CocoaPod其实有更便捷的管理方式，见以下插件部分。</p>

<p>    <strong>三、插件</strong><br />
    Xcode已经是一个非常强大的IDE了，但是，它还可以更强大，这就需要外挂了。<br />
    首先，安装插件管理器，当然你也可以手动来管理，但是强列推荐使用它<a href="https://github.com/supermarin/Alcatraz"><strong>Alcatraz</strong></a>，有了它，你的xcode将无所不能，且极其的方便管理插件，安装卸载，一键搞定。详细教程，点开链接后仔细阅读吧，以下简单说明安装和卸载：<br />
    <strong>安装</strong>：curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh<br />
    或者下载源码编译即可<br />
    <strong>重启xcode</strong>，即可安装好<br />
    <strong>卸载</strong>：我还没有卸载过，你要不喜欢，运行下面的命令吧  </p>

<pre><code>卸载Alcatraz: rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin
卸载通过它安装的插件: rm -rf ~/Library/Application\ Support/Alcatraz/
</code></pre>

<p>    启动Alcatraz：<code>command+shift+9</code>或者window-&gt;Package Manager<br />
    它有四个菜单，分别为<strong>All 插件  主题  模板</strong>，点击单个插件前面的小图标时，会自动安装，安装成功后，注意看图标，变成了淡蓝色(注意睁大眼睛看)，卸载再点一次即可，更新再点一次就是更新了。</p>

<p>    网上已经有了各种排名的xcode的十大插件、十五大插件的，试用了一下，下面简单介绍几个个人使用后，觉得挺不错的插件：  </p>

<p>    1.<strong>CocoaPods</strong><br />
    不喜欢使用命令行？没关系，装上这个插件，在Product选项里，就集成了CocoaPods选项了，直接点击就可以在Xcode里管理CocoaPods里的第三方库了。<br />
    
    <img src="https://github.com/kattrali/cocoadocs-xcode-plugin/raw/master/menu.png" alt="image" /></p>

<p>    2.<strong>ColorSense</strong><br />
    是不是每次设置颜色的时候，不知道效果？用它吧，直接在代码里修改颜色，如下图：<br />
    <br />
	<img src="images/blog/2014/Xcode效率/ColorSense.png" alt="image" /></p>

<p>    3.<strong>VVDocumenter</strong><br />
    注释对于代码很重要，特别是对代码规范要求很严的公司，那更是必须写的，话说，自己写，有一个好的规范不也挺好的么，这个配合<code>appledoc</code>一起工作，简直是神器，下面有介绍。这货可以让你在写注释的时候，大幅的降低繁杂重复的工作量。见下图：<br />
    
    <img src="https://raw.github.com/onevcat/VVDocumenter-Xcode/master/ScreenShot.gif" alt="image" /></p>

<p>    4.<strong>FuzzyAutocomplete</strong><br />
    xcode自带的自动代码匹配功能不是很完善，当你只大概记得一个方法时，这时候，xcode就无能为力了，它登场了，效果见下图：<br />
    
    <img src="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/raw/master/demo.gif" alt="image" /></p>

<p>    5.<strong>XAlign</strong><br />
    你有没有一个空格一个空格的敲，就为了对齐那该死的<code>@、=、*</code>等符号？好吧，如果你没有，那说明你没有代码洁癖，我应该恭喜你呢，还是替后来维护的人难受？<br />
    
    <img src="https://camo.githubusercontent.com/7973c0e352b1f91e3efe5b3550cff5df97f4589a/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f657175616c2e676966" alt="image" />
    <img src="https://camo.githubusercontent.com/f61bfc31e144ad6a9d7ca26fa19547a3af5da8c6/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f646566696e652e676966" alt="image" /></p>

<p>    6.<strong>BBUDebuggerTuckAway</strong><br />
    xcode很强大，但有的时候，它却不太讨人喜欢，我明明在编写代码了，调试窗口却死活不肯退场，死占着那个位置，让我多难受啊。好吧，我开始写代码了，你去睡一会儿吧。<br />
    <img src="http://cms.csdnimg.cn/article/201405/05/53674c667516f.jpg" alt="image" /></p>

<p>    7.<strong>XcodeBoost</strong><br />
    它的使用有一点小复杂，你需要花一点时间去熟悉它，了解它😃，别恐惧，其实也没有那么复杂了，它真的很强大，真的非常的强大，我还是先上图吧<br />
    
    <img src="https://github.com/fortinmike/XcodeBoost/raw/master/Images/highlighting.gif" alt="image" /><br />
    <img src="https://github.com/fortinmike/XcodeBoost/raw/master/Images/copy-method-declarations.gif" alt="image" /><br />
    <img src="https://github.com/fortinmike/XcodeBoost/raw/master/Images/paste-without-reindent.gif" alt="image" />  </p>

<p>    8.<strong>KSImagedNamed</strong>
    当我第一次看到它的时候，我内牛满面，我为什么不早点认识它呢，以前在代码里设置图片，不知道图片是什么样子，也不知道图片是什么名字的时候，在UI给我的图片包里，一个一个去找的时候，我有想疯了的感觉。这货不但可以自动匹配识别图片名字，还能预览图片，你还有什么理由不使用它呢？<br />
    
    <img src="http://cms.csdnimg.cn/article/201405/05/53673f77a65a3.jpg" alt="image" />
    
    以上是我使用过后，感觉非常不错，能够极大提高效率的几个插件，以后有新的体验了，还会更新，这些插件都可以直接通过<code>Alcatraz</code>来管理，所以不上链接了。</p>

<p>    <strong>四、文档生成工具Appledoc</strong><br />
    前面介绍了<code>VVDocumenter</code>，终于轮到它登场了，使用<code>VVDocumenter</code>写上标准的注释，然后使用appledoc，一键生成苹果官方式的文档，如下图所示：<br />
    
	<img src="images/blog/2014/Xcode效率/appledoc1.png" alt="image" />  </p>

<p>    首先安装，可以选择正常安装，也可以选择homebrew安装。<br />
    <strong>正常安装</strong>：  </p>

<pre><code>1. git clone git://github.com/tomaz/appledoc.git
2. cd ./appledoc
3. sudo sh install-appledoc.sh
</code></pre>

<p>    <strong>homeBrew安装</strong>：  </p>

<pre><code>brew install appledoc
</code></pre>

<p>    <strong>使用：</strong>  </p>

<pre><code>1. cd 项目目录
2.appledoc -o ./doc --project-name MyProject --project-company MyCompany --company-id companyId .
</code></pre>

<p>    首先进入项目目录，然后运行上面的命令，<code>MyProject</code>是你项目的名字，<code>MyCompany</code>是你公司的名字，最后<code>./doc</code>是指在当前目录下，生成一个doc目录，里面有一个<code>docset-installed.txt</code>文件，里面记录你安装的记录和文档生成的路径，<code>companyId</code>一般写成<code>com.company</code>格式。<br />
    appledoc支持markdown、html等语言来写注释，详细的介绍推荐看<a href="http://blog.ibireme.com/2013/08/26/appledoc-guide/">这篇文章</a></p>

<p>    <strong>总结：</strong><br />
    Xcode虽然是苹果一家开发维护，封闭的，但是在配合一些其它的工具，还是可以极大的提高我们的开发效率，工欲善其事，必先利其器，好好的挖掘它的潜力，为我们服务！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git简单实用操作]]></title>
    <link href="http://makeLaugh.github.io/blog/2014/05/11/gitjian-dan-shi-yong-cao-zuo/"/>
    <updated>2014-05-11T12:00:04+08:00</updated>
    <id>http://makeLaugh.github.io/blog/2014/05/11/gitjian-dan-shi-yong-cao-zuo</id>
    <content type="html"><![CDATA[<p><strong>总则：</strong>  </p>

<pre><code>1.多使用分支操作，体会git强大的分支功能。
2.在创建代码仓库的时候，默认会创建一个master分支，这个分支做为一个稳定分支，只合并稳定的代码。
3.另外创建一个dev分支，这个分支做为日常的开发测试使用，dev分支测试稳家后，方合并到master分支去。
4.如果需要开发计划外的功能时，可基于当前的开发分支，创建一个feature分支，完成后如果需要则合并到dev分支，如无需再使用则可删除。
5.如果遇到bug需要紧急修复，则可基于master分支创建fixed分支，修复完成测试通过，则合并到master分支，删除fixed分支。
</code></pre>

<p><strong>本地操作</strong></p>

<ul>
  <li>初始化：git init</li>
  <li>添加所有修改文件到git仓库：git add -A</li>
  <li>添加某单个文件到git仓库：git add 文件件</li>
  <li>确认修改内容：git commit -m “修改内容叙述”</li>
</ul>

<p><strong>与服务器相连</strong></p>

<ul>
  <li>克隆一个仓库：git clone 远端地址</li>
  <li>查看连接的远端地址：git remote -v</li>
  <li>连接到远端服务器：git remote add origin 远端地址</li>
  <li>与远端服务器断开连接：git remote rm origin</li>
  <li>将远端代码合并到本地：git pull origin master</li>
  <li>将本地代码上传到远端服务器：git push origin master</li>
</ul>

<p><strong>分支与合并</strong></p>

<ul>
  <li>查看分支：git branch -a</li>
  <li>基于当前分支创建分支并切换到新的分支：git checkout -b 分支名</li>
  <li>当前在master分支，将dev分支合并到master：git merge dev</li>
  <li>删除本地分支：git branch -d 分支名</li>
  <li>删除远端分支：
    <ul>
      <li>1.git push origin –delete 分支名  </li>
      <li>2.git push origin :分支名 //用空分支覆盖远端分支方式 </li>
    </ul>
  </li>
  <li>克隆远端某个分支：git checkout –track -b foobar origin/foobar</li>
  <li>提交本地的test分支到远端的master分支：git push origin test:master</li>
  <li>提交本地的test分支作为远端的test分支：git push origin test:test</li>
</ul>

<p><strong>查看状态</strong></p>

<ul>
  <li>查看当前哪些文件更改了而没有添加到仓库跟踪：git status</li>
  <li>查看历史提交记录：git log</li>
</ul>

<p><strong>版本回溯</strong></p>

<p>  <em>为了安全起见，最好基于所在分支创建一个分支，回到历史版本，找到需要的代码，然后再删除该分支。</em></p>

<ul>
  <li>在当前分支新建分支：git checkout -b 分支名</li>
  <li>查看历史提交记录，找到提交记录id：git log</li>
  <li>回到需要的历史版本：git checkout commitId</li>
  <li>找到需要的代码，复制出来，切换回原分支，删除该分支</li>
</ul>

]]></content>
  </entry>
  
</feed>
