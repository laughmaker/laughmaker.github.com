<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 能工巧匠 | 闻竹]]></title>
  <link href="http://makeLaugh.github.io/blog/categories/neng-gong-qiao-jiang/atom.xml" rel="self"/>
  <link href="http://makeLaugh.github.io/"/>
  <updated>2014-05-15T17:05:22+08:00</updated>
  <id>http://makeLaugh.github.io/</id>
  <author>
    <name><![CDATA[makeLaugh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git简单实用操作]]></title>
    <link href="http://makeLaugh.github.io/blog/2014/05/11/gitjian-dan-shi-yong-cao-zuo/"/>
    <updated>2014-05-11T12:00:04+08:00</updated>
    <id>http://makeLaugh.github.io/blog/2014/05/11/gitjian-dan-shi-yong-cao-zuo</id>
    <content type="html"><![CDATA[<p><strong>总则：</strong>  </p>

<pre><code>1.多使用分支操作，体会git强大的分支功能。
2.在创建代码仓库的时候，默认会创建一个master分支，这个分支做为一个稳定分支，只合并稳定的代码。
3.另外创建一个dev分支，这个分支做为日常的开发测试使用，dev分支测试稳家后，方合并到master分支去。
4.如果需要开发计划外的功能时，可基于当前的开发分支，创建一个feature分支，完成后如果需要则合并到dev分支，如无需再使用则可删除。
5.如果遇到bug需要紧急修复，则可基于master分支创建fixed分支，修复完成测试通过，则合并到master分支，删除fixed分支。
</code></pre>

<p><strong>本地操作</strong></p>

<ul>
  <li>初始化：git init</li>
  <li>添加所有修改文件到git仓库：git add -A</li>
  <li>添加某单个文件到git仓库：git add 文件件</li>
  <li>确认修改内容：git commit -m “修改内容叙述”</li>
</ul>

<p><strong>与服务器相连</strong></p>

<ul>
  <li>克隆一个仓库：git clone 远端地址</li>
  <li>查看连接的远端地址：git remote -v</li>
  <li>连接到远端服务器：git remote add origin 远端地址</li>
  <li>与远端服务器断开连接：git remote rm origin</li>
  <li>将远端代码合并到本地：git pull origin master</li>
  <li>将本地代码上传到远端服务器：git push origin master</li>
</ul>

<p><strong>分支与合并</strong></p>

<ul>
  <li>查看分支：git branch -a</li>
  <li>基于当前分支创建分支并切换到新的分支：git checkout -b 分支名</li>
  <li>当前在master分支，将dev分支合并到master：git merge dev</li>
  <li>删除本地分支：git branch -d 分支名</li>
  <li>删除远端分支：
    <ul>
      <li>1.git push origin –delete 分支名  </li>
      <li>2.git push origin :分支名 //用空分支覆盖远端分支方式 </li>
    </ul>
  </li>
  <li>克隆远端某个分支：git checkout –track -b foobar origin/foobar</li>
  <li>提交本地的test分支到远端的master分支：git push origin test:master</li>
  <li>提交本地的test分支作为远端的test分支：git push origin test:test</li>
</ul>

<p><strong>查看状态</strong></p>

<ul>
  <li>查看当前哪些文件更改了而没有添加到仓库跟踪：git status</li>
  <li>查看历史提交记录：git log</li>
</ul>

<p><strong>版本回溯</strong></p>

<p>  <em>为了安全起见，最好基于所在分支创建一个分支，回到历史版本，找到需要的代码，然后再删除该分支。</em></p>

<ul>
  <li>在当前分支新建分支：git checkout -b 分支名</li>
  <li>查看历史提交记录，找到提交记录id：git log</li>
  <li>回到需要的历史版本：git checkout commitId</li>
  <li>找到需要的代码，复制出来，切换回原分支，删除该分支</li>
</ul>

]]></content>
  </entry>
  
</feed>
