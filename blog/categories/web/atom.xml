<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | 闻竹]]></title>
  <link href="http://laughmaker.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://laughmaker.github.io/"/>
  <updated>2015-02-11T17:45:45+08:00</updated>
  <id>http://laughmaker.github.io/</id>
  <author>
    <name><![CDATA[laughmaker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mac下配置nginx+php+mongo环境]]></title>
    <link href="http://laughmaker.github.io/blog/2015/02/11/macxia-pei-zhi-nginx-plus-php-plus-mongohuan-jing/"/>
    <updated>2015-02-11T17:30:09+08:00</updated>
    <id>http://laughmaker.github.io/blog/2015/02/11/macxia-pei-zhi-nginx-plus-php-plus-mongohuan-jing</id>
    <content type="html"><![CDATA[<h4 id="brew">安装brew</h4>

<p>安装：</p>

<pre><code>curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/local --strip 1
</code></pre>

<p>brew安装的软件目录：</p>

<pre><code>/usr/local/Cellar
</code></pre>

<p>常用命令：</p>

<ul>
  <li>更新brew：brew update</li>
  <li>更新所有brew安装的软件：brew upgrade</li>
  <li>查看所有brew安装的软件：brew list</li>
  <li>搜索具体的程序包：brew search mysql</li>
  <li>安装具体的程序包：brew install mysql</li>
  <li>查看具体程序的信息：brew info mysql</li>
  <li>卸载具体的应用：brew uninstall mysql</li>
</ul>

<hr />

<h4 id="pecl">安装pecl</h4>

<pre><code>cd /usr/lib/php 
sudo php install-pear-nozlib.phar 
sudo pear channel-update pear.php.net 
sudo pecl channel-update pecl.php.net 
sudo pear upgrade-all
</code></pre>

<hr />

<h4 id="mongo">安装mongo</h4>

<p>安装</p>

<pre><code>brew install mongodb
</code></pre>

<p>创建/data/db文件夹，启动数据库需要</p>

<pre><code>sudo mkdir -p /data/db
</code></pre>

<p>启动数据库</p>

<pre><code>sudo mongod
</code></pre>

<p>命令行启动mongo操作终端(非必须)</p>

<pre><code>sudo mongo
</code></pre>

<p>停止数据库</p>

<pre><code>sudo pkill mongo
</code></pre>

<hr />

<h4 id="php">配置php</h4>

<p>由于mac自带有php，故直接使用系统自带的php</p>

<p>启动,若提示无相关文件，则创建相关文件再启动</p>

<pre><code>sudo php-fpm
</code></pre>

<p>配置文件路径</p>

<pre><code>/etc/php.ini
</code></pre>

<p>若无该配置文件，则创建该文件</p>

<pre><code>sudo mv /etc/php.ini.default /etc/php.ini
</code></pre>

<p>php扩展路径</p>

<pre><code>/usr/lib/php/extensions/
</code></pre>

<hr />

<h4 id="phpmongo">配置php的mongo扩展</h4>

<p>安装</p>

<pre><code>sudo pecl install mongo
</code></pre>

<p>在/etc/php.ini文档中最后添加</p>

<pre><code>extension=mongo.so
</code></pre>

<p>详细文档</p>

<p><a href="http://docs.mongodb.org/ecosystem/drivers/php/">PHP MongoDB Driver</a></p>

<hr />

<h4 id="nginx">安装nginx</h4>

<p>安装</p>

<pre><code>brew install nginx
</code></pre>

<p>启动</p>

<pre><code>sudo nginx
</code></pre>

<p>配置文件路径</p>

<pre><code>/usr/local/etc/nginx/nginx.conf
</code></pre>

<p>页面访问目录</p>

<pre><code>/usr/local/var/www
</code></pre>

<p>nginx常用命令</p>

<pre><code>nginx -V 查看版本，以及配置文件地址  
nginx -v 查看版本  
nginx -c filename 指定配置文件  
nginx -h 帮助  
nginx -s [reload\reopen\stop\quit]
</code></pre>

<p>详细配置教程</p>

<p><a href="http://oilbeater.com/nginx/2014/12/29/nginx-conf-from-zero.html">nginx配置从零开始</a></p>

<hr />

<h4 id="nginxphp">配置nginx支持php文件</h4>

<p>打开配置文档</p>

<p>sudo vim /usr/local/etc/nginx/nginx.conf</p>

<p>将监听端口更改80</p>

<pre><code>server {
        listen       80;
        server_name  localhost;
</code></pre>

<p>添加php解析支持，取消注释，并更改文件目录为/usr/local/var/www</p>

<pre><code>location ~ \.php$ {
            root           /usr/local/var/www;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/local/var/www$fastcgi_script_name;
            include        fastcgi_params;
        }
</code></pre>

<p><a href="http://huoding.com/2013/10/23/290">如何正确的配置nginx+php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下配置web环境]]></title>
    <link href="http://laughmaker.github.io/blog/2015/02/11/macxia-pei-zhi-webhuan-jing/"/>
    <updated>2015-02-11T17:26:29+08:00</updated>
    <id>http://laughmaker.github.io/blog/2015/02/11/macxia-pei-zhi-webhuan-jing</id>
    <content type="html"><![CDATA[<h3 id="phpjs">配置PHP和JS调试环境</h3>
<ul>
  <li>点击tools -&gt; build system -&gt; new build system</li>
  <li>
    <p>在其中输入如下代码，保存为PHP.sublime-build </p>

    <pre><code>  {
      "cmd": ["php", "$file"],
      "file_regex": "^(...*?):([0-9]*):?([0-9]*)",
      "selector": "source.php"
  }
</code></pre>
  </li>
  <li>此后，即可用command+B进行编译调试了</li>
</ul>

<p>另外，添加一个new build system，命名为JSC.sublime-build，添加以下内容，即可调试js代码：</p>

<pre><code>{
	"cmd": ["/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc", "$file"],
	"selector": "source.js"
}
</code></pre>

<hr />

<h3 id="xdebug">配置Xdebug</h3>

<h4 id="xdebug-1">安装xdebug</h4>

<p>选择一个xdebug版本</p>

<ul>
  <li>brew search xdebug</li>
</ul>

<p>安装xdebug</p>

<ul>
  <li>brew install php55-xdebug</li>
</ul>

<p>将以下代码片断加入到php.ini文件最后</p>

<pre><code>zend_extension= "/usr/lib/php/extensions/no-debug-non-zts-20121212/xdebug.so"
xdebug.default_enable = On
xdebug.show_exception_trace = On
xdebug.show_local_vars = 1
xdebug.max_nesting_level = 50
xdebug.var_display_max_depth = 6

xdebug.dump_once = On
xdebug.dump_globals = On
xdebug.dump_undefined = On
xdebug.dump.REQUEST = *
xdebug.cli_color = 2
</code></pre>

<p><strong>以下为配置sublime</strong></p>

<p>将项目保存为一个project</p>

<ul>
  <li>
    <p>sublime-&gt;project-&gt;save project as…</p>
  </li>
  <li>
    <p>利用package control 安装xdebug client</p>
  </li>
</ul>

<p>配置项目</p>

<ul>
  <li>sublime-&gt;project-&gt;edit project</li>
</ul>

<p>在其中添加类似以下内容</p>

<pre><code>{
    "folders":
    [
        {
            "follow_symlinks": true,
            "path": "."
        }
    ],
    "settings": {
        "xdebug": {
             "url": "http://my.local.website/",
        }
    }
}
</code></pre>

<p>开启调试，在项目文件中添加断点</p>

<ul>
  <li>xdebug-&gt;Add/Remove breakpoint</li>
</ul>

<p>进行调试</p>

<pre><code>tools-&gt;xdebug-&gt;start debugging(launch browser)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP编程规范]]></title>
    <link href="http://laughmaker.github.io/blog/2015/02/11/phpbian-cheng-gui-fan/"/>
    <updated>2015-02-11T17:18:09+08:00</updated>
    <id>http://laughmaker.github.io/blog/2015/02/11/phpbian-cheng-gui-fan</id>
    <content type="html"><![CDATA[<h4 id="php">PHP命名规范</h4>

<ol>
  <li>类文件都是以“<strong>.class.php</strong>“为后缀，且类文件名只允许字母，使用驼峰法命名，并且首字母大写，例如：DbMysql.class.php 。</li>
  <li>配置和函数等其他类库文件之外的文件一般是分别以“.inc.php“和”.php“为后缀，且文件名命名使用小写字母和下划线的方式，多个单词之间以下 划线分隔，例如config.inc.php ， common.php，install_function.php 。</li>
  <li>确保文件的命名和调用大小写一致，是由于在类Unix系统上面，对大小写是敏感的。</li>
  <li>类名和文件名一致（包括上面说的大小写一致），且类名只允许字母，例如 UserAction类的文件命名是UserAction.class.php， InfoModel类的文件名是InfoModel.class.php 。</li>
  <li>控制器类以Action为后缀，例如 UserAction、InfoAction ，模型类以Model为后缀，例如UserModel、InfoModel ，其他类也分别以相应分类为后缀，例如Service 、Widget。</li>
  <li>方法名只允许由字母组成，下划线是不允许的，首字母要小写，其后每个单词首字母要大写，即所谓的 “驼峰法命名” 规则，且越详细越好，应该能够描述清楚该方法的功能，例如switchModel、findPage。</li>
  <li>属性的命名只允许由字母组成，下划线是不允许的，首字母要小写，其后每个单词首字母要大写，即所谓的 “驼峰法命名” 规则，例如tablePrefix、tableName 。</li>
  <li>
    <p>对于对象成员的访问，我们必须始终使用 “get” 和 “set” 方法。例如：  </p>

    <pre><code> class Foo
 {
     protected $_testObj;
     public function getTestObj()
	
     {
         return $this-&gt;_testObj;
     }
     public function setTestObj($testObj)
     {
         $this-&gt;testObj = $_testObj;
     }
 }
</code></pre>
  </li>
  <li>
    <p>当类成员方法被声明为 private 时，必须分别以双下划线 “<em>_“为开头；被声明为 protected 时，必须分别以单下划线 “</em>” 为开头；一般情况下的方法不含下划线。例如 ：</p>

    <pre><code> class Foo
 {
     private function __example()
     {
         // ...
     }
     protected function _example()
     {
         // ...
     }
     public function example()
     {
         // ...
     }
 }
</code></pre>
  </li>
  <li>
    <p>如果我们需要把一些经常使用的方法定义为全局函数，那么应该把它们以静态 (static) 的形式定义在类中。例如：</p>

    <pre><code>class Think
{
    // ...
    static public function autoload($classname)
    {
        // ...
    }
}
</code></pre>
  </li>
  <li>被声明为 private的类成员属性必须由双下划线 “<em>_” 作为开头；被声明为 protected 的类成员属性必须由下划线 “</em>” 作为开头；而声明为 public 的成员属性则在任何时候都不允许含有下划线。</li>
  <li>函数的命名使用小写字母和下划线的方式，且越详细越好，应该能够描述清楚该函数的功能，例如 get_client_ip 。</li>
  <li>当方法或函数参数不一定需要被赋值的时候，用 “null” 来代替 “false” 作为函数参数的默认值，除非该参数是 boolean 值。</li>
  <li>变量只允许由小写字母和下划线组成，且建议用描述性的变量的命名，越详细越好，以至于像 $i 或 $n 等等都是不鼓励使用的。</li>
  <li>类中的常量 constant 和全局范围内常量define，只能由大写字母和下划线组成，各个单词之间以下划线分割。</li>
  <li>boolean 值和 null 值都采用小写。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下安装配置mysql]]></title>
    <link href="http://laughmaker.github.io/blog/2015/02/11/macxia-an-zhuang-pei-zhi-mysql/"/>
    <updated>2015-02-11T17:00:22+08:00</updated>
    <id>http://laughmaker.github.io/blog/2015/02/11/macxia-an-zhuang-pei-zhi-mysql</id>
    <content type="html"><![CDATA[<h2 id="macmysql">mac下安装配置mysql</h2>

<p>1.安装：</p>

<pre><code>brew install mysql
</code></pre>

<p>2.添加修改mysql配置<br />
运行：</p>

<pre><code>mysqld --help --verbose | more  
</code></pre>

<p>查看这一行：</p>

<pre><code>  Default options are read from the following files in the given order:
/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf
</code></pre>

<p>创建连接和配置文件：</p>

<pre><code>ls $(brew --prefix mysql)/support-files/my-* (用这个可以找到样例.cnf)
cp /usr/local/opt/mysql/support-files/my-default.cnf /etc/my.cnf (拷贝到第一个默认读取目录)
</code></pre>

<p>3.解决mysql_connect():No such file or director错误</p>

<p>启动mysql后,如果/tmp/mysql.sock文件存在，/var/mysql/mysql.sock不存在，则运行：</p>

<pre><code>cd /var
sudo mkdir mysql
cd mysql
sudo ln -s /tmp/mysql.sock mysql.sock
</code></pre>

<p>3.启动与停止</p>

<pre><code>mysql.server start
mysql.server stop
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mongodb常用操作]]></title>
    <link href="http://laughmaker.github.io/blog/2015/01/04/mongodbchang-yong-cao-zuo/"/>
    <updated>2015-01-04T15:56:30+08:00</updated>
    <id>http://laughmaker.github.io/blog/2015/01/04/mongodbchang-yong-cao-zuo</id>
    <content type="html"><![CDATA[<hr />

<p>PHP对MongoDB的扩展文档地址：http://us3.php.net/manual/en/book.mongo.php</p>

<pre><code>在PHP的Mongo扩展中，有4类接口对象：  
1.针对MongoDB的连接的操作：MongoClient
http://us3.php.net/manual/en/class.mongoclient.php
2.针对MongoDB中数据库的操作：MongoDB
http://us3.php.net/manual/en/book.mongo.php
3.针对MongoDB中的Collection的操作：MongoCollection
http://us3.php.net/manual/en/class.mongocollection.php
4.针对查询结果集的操作：MongoCursor和MongoCommandCursor
http://us3.php.net/manual/en/class.mongocursor.php
http://us3.php.net/manual/en/class.mongocommandcursor.php
</code></pre>

<hr />

<h4 id="section">常用管理命令</h4>
<pre><code>./mongo	#启动Mongo Shell
use foo	#进入数据库foo
db.createUser({user:'hzdRW', pwd:'hezhendong', roles:[{role:'dbOwner', db:'hzdDB'}]} #添加用户或修改用户密码
db.system.users.find()	#查看用户列表
db.auth('name', 'pwd')	#用户认证
db.removeUser('name')	#删除用户
show users	#查看所有用户
show dbs	#查看所有数据库
show collectios  #查看所有的collection
db.printCollectionStats()	#查看各collection的状态
db.printReplicationInfo()	#查看主从复制状态
db.repariDatabase()	 #修复数据库
db.copyDatabase(fromDB, toDB, fromHost[, username, password])  #拷贝数据库
db.collection_name.drop()  #删除集合
db.dropDatabase()  #删除当前数据库
db.shutdownServer() #关闭当前服务程序
exit #退出当前shel
</code></pre>

<hr />

<h4 id="section-1">数据库连接</h4>
<p>1.默认连接本机的27017端口 </p>

<pre><code>$mongo = new MongoClient();
</code></pre>

<p>2.自定义格式连接，一般ip为本机可写为localhost,port可省略  </p>

<pre><code>格式：$mongo = new MongoClient('mongodb://username:password@ip:port');  
</code></pre>

<hr />

<h4 id="section-2">查询</h4>
<p>1.find findOne findAndModify</p>

<ul>
  <li>
    <p>查询user集合中全部内容：</p>

    <pre><code>  db.user.find();
</code></pre>
  </li>
  <li>
    <p>查询user集合中age的值为27的文档：</p>

    <pre><code>  db.user.find({"age":27});
</code></pre>
  </li>
  <li>
    <p>查询user集合中age为27,username为joe的内容：</p>

    <pre><code>  db.user.find({"age":27, "username":27});
</code></pre>
  </li>
  <li>
    <p>查询user集合中的所有内容，但只返回username和email键的值：</p>

    <pre><code>  db.user.find({}, {"username":1, "email":1});
</code></pre>
  </li>
  <li>
    <p>查询user集合中的所有内容，但剔除age键：</p>

    <pre><code>  db.user.find({}, {"age": 0});
</code></pre>
  </li>
  <li>
    <p>查询user集合中的age为18的第一条记录：</p>

    <pre><code>  db.user.findOne({"age":18});
</code></pre>
  </li>
  <li>
    <p>根据查询条件找到相应的记录并对一条结果做更新操作，其中query为查询条件，sort指定排序，remove表示删除（remove和update不能同时指定），new表示返回更新之前还是之后的结果，这条命令只能返回一条结果</p>

    <pre><code>  db.user.findAndModify({"query":{"username":"joe"}, "sort":{"age":1}, "remove":true, "new":true});
</code></pre>
  </li>
</ul>

<p>2.查询操作符</p>

<pre><code>$lt(&lt;) $lte(&lt;=) $gt(&gt;=) $gte(&gt;=) 
$in(匹配一个键的多个值) $nin(与列出来的所有值都不匹配)
$all:匹配数组中所有元素，模糊匹配，不关注顺序
$not:反向匹配
$size:匹配数组长度
</code></pre>

<ul>
  <li>
    <p>查询age在18～30(含)岁之间的用户：</p>

    <pre><code>  db.user.find({"age":{"$gte":18, "$lte":30}});
</code></pre>
  </li>
  <li>
    <p>查询age为18、20、22岁的用户：</p>

    <pre><code>  db.user.find({"age":{"$in":[18, 20, 22]}});
</code></pre>
  </li>
  <li>
    <p>查询age不为18、20、22岁的所有用户：</p>

    <pre><code>  db.user.find({"age":{"$nin":[18, 20, 22]}});
</code></pre>
  </li>
  <li>
    <p>查询username不为joe的所有用户：</p>

    <pre><code>  db.user.find({"username":{"$not":"joe"}});
</code></pre>
  </li>
</ul>

<p>3.$exists<br />
判断字段是否存在</p>

<ul>
  <li>
    <p>查询所有存在username字段的记录：</p>

    <pre><code>  db.user.find({"username":{"$exsits":true}});
</code></pre>
  </li>
  <li>
    <p>查询所有不存在username字段的记录：</p>

    <pre><code>  db.user.find({"username":{"$exsits":false}});
</code></pre>
  </li>
</ul>

<p>4.$slice<br />
返回数组的一个子集合</p>

<ul>
  <li>
    <p>查询user集合中username为joe的前10个用户：</p>

    <pre><code>  db.user.find({"username":"joe"}, {"$slice": 10});
</code></pre>
  </li>
  <li>
    <p>查询user集合中从第21条记录开始的10条记录：</p>

    <pre><code>  db.user.find({"username":"joe"}, {"$slice":[20, 10]});
</code></pre>
  </li>
</ul>

<p>5.对结果排序  </p>

<ul>
  <li>对年龄升序：db.user.find().sort({“age”:1});</li>
  <li>对年龄降序：db.user.find().sort({“age”:-1});</li>
</ul>

<p>6.限制返回数据条数  </p>

<ul>
  <li>返回5条记录:db.user.find().limit(5)</li>
  <li>从第3条记录开始，返回5条记录:db.user.find().skip(3).limit(5)</li>
  <li>返回记录条数:db.user.find().count()</li>
  <li>返回限制条件后的记录数量:db.user.find().skip(10).limit(5).count(1)</li>
</ul>

<hr />

<h4 id="section-3">插入、更新、删除</h4>
<p><code>insert save update remove</code><br />
若存在_id主键，insert()不做操作，且提示错误，save()改变原来的内容为新内容。</p>

<p><strong>修改器</strong>:</p>

<pre><code>$set:修改字段
$unset:删除字段，不论对目标键使用1、0、-1或者具体的字符串等都是可以删除该目标键。
$rename:修改字段字
$push、pushAll:向数组末尾追加数据，字段不存在则创建
$addToSet:向数组类型乐加数据时避免重复
$each:遍历数组
$pop:从数组中删除数据，{"$pop":{key:1}}从末尾删除，-1从头部删除
$pull和$pullAll:从数组中删除指定数据
</code></pre>

<ul>
  <li>
    <p>向user集合中插入单个文档：</p>

    <pre><code>  db.user.insert({"username":"joe", "age":18});
</code></pre>
  </li>
  <li>
    <p>清空user集合：</p>

    <pre><code>  db.user.remove();
</code></pre>
  </li>
  <li>
    <p>清除user集合中所有age为18的数据：</p>

    <pre><code>  db.user.remove({"age":18});
</code></pre>
  </li>
  <li>
    <p>根据query条件修改，如果不存在则插入，物许修改多条记录：</p>

    <pre><code>  db.foo.update({"y":1}, {"$set":{"x":2}}, upsert=true, multi=true);
</code></pre>
  </li>
  <li>
    <p>找到username为joe的记录，并删除email字段：</p>

    <pre><code>  db.user.update({"username":"joe"}, {"$unset":{"email":1}});
</code></pre>
  </li>
  <li>
    <p>修改username为nickname:</p>

    <pre><code>  db.user.update({}, {"$rename":{"username":"nickname"}});
</code></pre>
  </li>
</ul>

<hr />

<h4 id="section-4">修改器详解示例</h4>

<pre><code>对于文档的更新除替换外，针对某个或多个文档只需要部分更新可使用原子的更新修改器，能够高效的进行文档更新。更新修改器是中特殊的键， 用来指定复杂的操作，比如增加、删除或者调整键，还可能是操作数组或者内嵌文档。
</code></pre>

<p>1.$inc</p>

<p>$inc可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。</p>

<pre><code>示例文档：{"uid":"201203","type":"1",size:10}
&gt; db.b.insert({"uid":"201203","type":"1",size:10})
&gt; db.b.find()
{ "_id" : ObjectId("5003b6135af21ff428dafbe6"), "uid" : "201203", "type" : "1",
"size" : 10 }
&gt; db.b.update({"uid" : "201203"},{"$inc":{"size" : 1}})
&gt; db.b.find()
{ "_id" : ObjectId("5003b6135af21ff428dafbe6"), "uid" : "201203", "type" : "1",
"size" : 11 }
&gt; db.b.update({"uid" : "201203"},{"$inc":{"size" : 2}})
&gt; db.b.find()
{ "_id" : ObjectId("5003b6135af21ff428dafbe6"), "uid" : "201203", "type" : "1",
"size" : 13 }
&gt; db.b.update({"uid" : "201203"},{"$inc":{"size" : -1}})
&gt; db.b.find()
{ "_id" : ObjectId("5003b6135af21ff428dafbe6"), "uid" : "201203", "type" : "1",
"size" : 12 }
</code></pre>

<p>2.$set</p>

<p>用来指定一个键并更新键值，若键不存在并创建，对于内嵌文档在使用$set更新时，使用”.”连接的方式。</p>

<pre><code>&gt; db.a.findOne({"uid" : "20120002","type" : "3"})
{ "_id" : ObjectId("500216de81b954b6161a7d8f"), "desc" : "hello world2!", "num"
: 40, "sname" : "jk", "type" : "3", "uid" : "20120002" }
</code></pre>

<p>–size键不存在的场合</p>

<pre><code>&gt; db.a.update({"uid" : "20120002","type" : "3"},{"$set":{"size":10}})
&gt; db.a.findOne({"uid" : "20120002","type" : "3"})
{ "_id" : ObjectId("500216de81b954b6161a7d8f"), "desc" : "hello world2!", "num"
: 40, "size" : 10, "sname" : "jk", "type" : "3", "uid" : "20120002" }
</code></pre>

<p>–sname键存在的场合</p>

<pre><code>&gt; db.a.update({"uid" : "20120002","type" : "3"},{"$set":{"sname":"ssk"}})
&gt; db.a.find()
{ "_id" : ObjectId("500216de81b954b6161a7d8f"), "desc" : "hello world2!", "num"
: 40, "size" : 10, "sname" : "ssk", "type" : "3", "uid" : "20120002" }
{ "_id" : ObjectId("50026affdeb4fa8d154f8572"), "desc" : "hello world1!", "num"
: 50, "sname" : "jk", "type" : "1", "uid" : "20120002" }
</code></pre>

<p>–可改变键的值类型</p>

<pre><code>&gt; db.a.update({"uid" : "20120002","type" : "3"},{"$set":{"sname":["java",".net","c++"]}})
&gt; db.a.findOne({"uid" : "20120002","type" : "3"})
{
        "_id" : ObjectId("500216de81b954b6161a7d8f"),
        "desc" : "hello world2!",
        "num" : 40,
        "size" : 10,
        "sname" : [
                "java",
                ".net",
                "c++"
        ],
        "type" : "3",
        "uid" : "20120002"
}
</code></pre>

<p>对于内嵌的文档，$set又是如何进行更新的内嵌的文档的呢，请看下面的示例：</p>

<pre><code>示例文档：{"name":"toyota","type":"suv","size":{"height":10,"width":5,"length":15}}
&gt; db.c.findOne({"name":"toyota"})
{
        "_id" : ObjectId("5003be465af21ff428dafbe7"),
        "name" : "toyota",
        "type" : "suv",
        "size" : {
                "height" : 10,
                "width" : 5,
                "length" : 15
        }
}
&gt; db.c.update({"name":"toyota"},{"$set":{"size.height":8}})
&gt; db.c.findOne({"name":"toyota"})
{
        "_id" : ObjectId("5003be465af21ff428dafbe7"),
        "name" : "toyota",
        "type" : "suv",
        "size" : {
                "height" : 8,
                "width" : 5,
                "length" : 15
        }
}
&gt; db.c.update({"name":"toyota"},{"$set":{"size.width":7}})
&gt; db.c.findOne({"name":"toyota"})
{
        "_id" : ObjectId("5003be465af21ff428dafbe7"),
        "name" : "toyota",
        "type" : "suv",
        "size" : {
                "height" : 8,
                "width" : 7,
                "length" : 15
        }
}
</code></pre>

<p>3.$unset</p>

<p>从字面就可以看出其意义，主要是用来删除键。
使用修改器$unset时，不论对目标键使用1、0、-1或者具体的字符串等都是可以删除该目标键。</p>

<pre><code>示例操作效果如下：
&gt; db.a.update({"uid" : "20120002","type" : "3"},{"$unset":{"sname":1}})
&gt; db.a.findOne({"uid" : "20120002","type" : "3"})
{
        "_id" : ObjectId("500216de81b954b6161a7d8f"),
        "desc" : "hello world2!",
        "num" : 40,
        "size" : 10,
        "type" : "3",
        "uid" : "20120002"
}
&gt; db.a.update({"uid" : "20120002","type" : "3"},{"$unset":{"num":0}})
&gt; db.a.findOne({"uid" : "20120002","type" : "3"})
{
        "_id" : ObjectId("500216de81b954b6161a7d8f"),
        "desc" : "hello world2!",
        "size" : 10,
        "type" : "3",
        "uid" : "20120002"
}
&gt; db.a.update({"uid" : "20120002","type" : "3"},{"$unset":{"size":-1}})
&gt; db.a.findOne({"uid" : "20120002","type" : "3"})
{
        "_id" : ObjectId("500216de81b954b6161a7d8f"),
        "desc" : "hello world2!",
        "type" : "3",
        "uid" : "20120002"
}
&gt; db.a.update({"uid" : "20120002","type" : "3"},{"$unset":{"desc":"sssssss"}})
&gt; db.a.findOne({"uid" : "20120002","type" : "3"})
{
        "_id" : ObjectId("500216de81b954b6161a7d8f"),
        "type" : "3",
        "uid" : "20120002"
}
</code></pre>

<p>4.数组修改器–$push</p>

<p>$push–向文档的某个数组类型的键添加一个数组元素，不过滤重复的数据。添加时键存在，要求键值类型必须是数组；键不存在，则创建数组类型的键。</p>

<p>示例操作效果如下：</p>

<pre><code>&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "type" : "suv",
"size" : { "height" : 8, "width" : 7, "length" : 15 } }
</code></pre>

<p>先push一个当前文档中不存在的键title</p>

<pre><code>&gt; db.c.update({"name" : "toyota"},{$push:{"title":"t1"}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1" ], "type" : "suv" }
</code></pre>

<p>再向title中push一个值</p>

<pre><code>&gt; db.c.update({"name" : "toyota"},{$push:{"title":"t2"}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1", "t2" ], "type" : "suv" }
</code></pre>

<p>再向title中push一个值</p>

<pre><code>&gt; db.c.update({"name" : "toyota"},{$push:{"title":"t2"}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1", "t2", "t2" ], "type" : "suv" }
</code></pre>

<p>再向一个已经存在的键值非数组类型的键push一个值</p>

<pre><code>&gt; db.c.update({"name" : "toyota"},{$push:{"size.height":10}})
Cannot apply $push/$pushAll modifier to non-array
&gt; db.c.update({"name" : "toyota"},{$push:{"name":"ddddddd"}})
Cannot apply $push/$pushAll modifier to non-array
</code></pre>

<p>5.数组修改器–$ne/$addToSet</p>

<p>主要给数组类型键值添加一个元素时，避免在数组中产生重复数据，$ne在有些情况是不通行的。</p>

<pre><code>&gt; db.c.update({"title" : {$ne:"t2"}},{$push:{"title":"t2"}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1", "t2", "t2" ], "type" : "suv" }
&gt; db.c.update({"name" : "toyota"},{$addToSet:{"title":"t2"}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1", "t2", "t2" ], "type" : "suv" }
</code></pre>

<p>6.数组修改器–$pop、$pull</p>

<p>$pop从数组的头或者尾删除数组中的元素，</p>

<p>示例如下：</p>

<pre><code>{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,  "width" : 7, "length" : 15 }, "title" : [ "t1", "t2", "t3", "t4" ],"type" : "suv" }
</code></pre>

<p>从数组的尾部删除 1</p>

<pre><code>&gt; db.c.update({"name" : "toyota"},{$pop:{"title":1}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1", "t2", "t3" ], "type" : "suv" }
</code></pre>

<p>从数组的头部 -1</p>

<pre><code>&gt; db.c.update({"name" : "toyota"},{$pop:{"title":-1}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t2", "t3" ], "type" : "suv" }
</code></pre>

<p>从数组的尾部删除 0</p>

<pre><code>&gt; db.c.update({"name" : "toyota"},{$pop:{"title":0}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t2" ], "type" : "suv" }
</code></pre>

<p>$pull从数组中删除满足条件的元素，示例如下：</p>

<pre><code>{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1", "t2", "t2", "t3" ],"type" : "suv" }
 
&gt; db.c.update({"name" : "toyota"},{$pull:{"title":"t2"}})
&gt; db.c.find()
{ "_id" : ObjectId("5003be465af21ff428dafbe7"), "name" : "toyota", "size" : { "height" : 8,
 "width" : 7, "length" : 15 }, "title" : [ "t1", "t3" ], "type" : "suv" }
</code></pre>

<p>7.数组的定位修改器</p>

<p>在需要对数组中的值进行操作的时候，可通过位置或者定位操作符（”$”)，数组是0开始的，可以直接将下标作为键来选择元素。<br />
使用$定位操作符时，若为多个文档满足条件，则只更新第一个文档。</p>

<p>示例如下：</p>

<pre><code>{"uid":"001",comments:[{"name":"t1","size":10},{"name":"t2","size":12}]}
&gt; db.c.find({"uid":"001"})
{ "_id" : ObjectId("5003da405af21ff428dafbe8"), "uid" : "001", "comments" : [ {
"name" : "t1", "size" : 10 }, { "name" : "t2", "size" : 12 } ] }
&gt; db.c.update({"uid":"001"},{$inc:{"comments.0.size":1}})
&gt; db.c.find({"uid":"001"})
{ "_id" : ObjectId("5003da405af21ff428dafbe8"), "uid" : "001", "comments" : [ {
"name" : "t1", "size" : 11 }, { "name" : "t2", "size" : 12 } ] }
&gt; db.c.update({"comments.name":"t1"},{$set:{"comments.$.size":1}})
&gt; db.c.find({"uid":"001"})
{ "_id" : ObjectId("5003da405af21ff428dafbe8"), "uid" : "001", "comments" : [ {
"name" : "t1", "size" : 1 }, { "name" : "t2", "size" : 12 } ] }
</code></pre>

<p>8.upsert</p>

<p>upsert是一种特殊的更新。当没有符合条件的文档，就以这个条件和更新文档为基础创建一个新的文档，如果找到匹配的文档就正常的更新。
使用upsert，既可以避免竞态问题，也可以减少代码量（update的第三个参数就表示这个upsert，参数为true时）</p>

<pre><code>&gt; db.c.remove()
&gt; db.c.update({"size":11},{$inc:{"size":3}})
&gt; db.c.find()
&gt; db.c.update({"size":11},{$inc:{"size":3}},false)
&gt; db.c.find()
&gt; db.c.update({"size":11},{$inc:{"size":3}},true)
&gt; db.c.find()
{ "_id" : ObjectId("5003ded6c28f67507a6df1de"), "size" : 14 }
</code></pre>

<p>9.save函数</p>

<p>1.可以在文档不存在的时候插入，存在的时候更新，只有一个参数文档。<br />
2.要是文档含有”_id”，会调用upsert。否则，会调用插入。</p>

<pre><code>&gt; db.a.find()
{ "_id" : ObjectId("50026affdeb4fa8d154f8572"), "desc" : "hello world1!", "num": 50,
 "sname" : "jk", "type" : "1", "uid" : "20120002" }
&gt; var o = db.a.findOne()
&gt; o.num = 55
55
&gt; db.a.save(o)
&gt; db.a.find()
{ "_id" : ObjectId("50026affdeb4fa8d154f8572"), "desc" : "hello world1!", "num": 55,
 "sname" : "jk", "type" : "1", "uid" : "20120002" }
</code></pre>

<hr />

<h4 id="section-5">索引管理</h4>

<ul>
  <li>
    <p>在字段firstname升序和lastname降序上创建一个名为idx_name的联合索引</p>

    <pre><code>  db.user.ensureIndex({"firstname":1, "lastname":-1}, {"name":"idx_name"})
</code></pre>
  </li>
  <li>
    <p>在username上创建一个唯一索引</p>

    <pre><code>  db.user.ensureIndex({"username":1}, {"unique":true});
</code></pre>
  </li>
</ul>

]]></content>
  </entry>
  
</feed>
